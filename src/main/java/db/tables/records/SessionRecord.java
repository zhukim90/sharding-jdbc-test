/*
 * This file is generated by jOOQ.
 */
package db.tables.records;


import db.tables.SessionTable;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionRecord extends UpdatableRecordImpl<SessionRecord> implements Record2<Long, Byte> {

    private static final long serialVersionUID = -897664814;

    /**
     * Setter for <code>sharding_jdbc_test.session.id</code>.
     */
    public SessionRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>sharding_jdbc_test.session.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>sharding_jdbc_test.session.uuid</code>.
     */
    public SessionRecord setUuid(Byte value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>sharding_jdbc_test.session.uuid</code>.
     */
    public Byte getUuid() {
        return (Byte) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Byte> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Byte> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return SessionTable.SESSION.ID;
    }

    @Override
    public Field<Byte> field2() {
        return SessionTable.SESSION.UUID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Byte component2() {
        return getUuid();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Byte value2() {
        return getUuid();
    }

    @Override
    public SessionRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public SessionRecord value2(Byte value) {
        setUuid(value);
        return this;
    }

    @Override
    public SessionRecord values(Long value1, Byte value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SessionRecord
     */
    public SessionRecord() {
        super(SessionTable.SESSION);
    }

    /**
     * Create a detached, initialised SessionRecord
     */
    public SessionRecord(Long id, Byte uuid) {
        super(SessionTable.SESSION);

        set(0, id);
        set(1, uuid);
    }
}
