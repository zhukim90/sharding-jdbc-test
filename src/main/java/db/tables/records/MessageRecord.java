/*
 * This file is generated by jOOQ.
 */
package db.tables.records;


import db.tables.MessageTable;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageRecord extends UpdatableRecordImpl<MessageRecord> implements Record6<Long, Long, String, Byte, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1793570482;

    /**
     * Setter for <code>sharding_jdbc_test.message.id</code>.
     */
    public MessageRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>sharding_jdbc_test.message.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>sharding_jdbc_test.message.session_id</code>.
     */
    public MessageRecord setSessionId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>sharding_jdbc_test.message.session_id</code>.
     */
    public Long getSessionId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>sharding_jdbc_test.message.content</code>.
     */
    public MessageRecord setContent(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>sharding_jdbc_test.message.content</code>.
     */
    public String getContent() {
        return (String) get(2);
    }

    /**
     * Setter for <code>sharding_jdbc_test.message.status</code>.
     */
    public MessageRecord setStatus(Byte value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>sharding_jdbc_test.message.status</code>.
     */
    public Byte getStatus() {
        return (Byte) get(3);
    }

    /**
     * Setter for <code>sharding_jdbc_test.message.created</code>.
     */
    public MessageRecord setCreated(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>sharding_jdbc_test.message.created</code>.
     */
    public LocalDateTime getCreated() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>sharding_jdbc_test.message.updated</code>.
     */
    public MessageRecord setUpdated(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>sharding_jdbc_test.message.updated</code>.
     */
    public LocalDateTime getUpdated() {
        return (LocalDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Byte, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, Long, String, Byte, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return MessageTable.MESSAGE.ID;
    }

    @Override
    public Field<Long> field2() {
        return MessageTable.MESSAGE.SESSION_ID;
    }

    @Override
    public Field<String> field3() {
        return MessageTable.MESSAGE.CONTENT;
    }

    @Override
    public Field<Byte> field4() {
        return MessageTable.MESSAGE.STATUS;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return MessageTable.MESSAGE.CREATED;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return MessageTable.MESSAGE.UPDATED;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getSessionId();
    }

    @Override
    public String component3() {
        return getContent();
    }

    @Override
    public Byte component4() {
        return getStatus();
    }

    @Override
    public LocalDateTime component5() {
        return getCreated();
    }

    @Override
    public LocalDateTime component6() {
        return getUpdated();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getSessionId();
    }

    @Override
    public String value3() {
        return getContent();
    }

    @Override
    public Byte value4() {
        return getStatus();
    }

    @Override
    public LocalDateTime value5() {
        return getCreated();
    }

    @Override
    public LocalDateTime value6() {
        return getUpdated();
    }

    @Override
    public MessageRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public MessageRecord value2(Long value) {
        setSessionId(value);
        return this;
    }

    @Override
    public MessageRecord value3(String value) {
        setContent(value);
        return this;
    }

    @Override
    public MessageRecord value4(Byte value) {
        setStatus(value);
        return this;
    }

    @Override
    public MessageRecord value5(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public MessageRecord value6(LocalDateTime value) {
        setUpdated(value);
        return this;
    }

    @Override
    public MessageRecord values(Long value1, Long value2, String value3, Byte value4, LocalDateTime value5, LocalDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessageRecord
     */
    public MessageRecord() {
        super(MessageTable.MESSAGE);
    }

    /**
     * Create a detached, initialised MessageRecord
     */
    public MessageRecord(Long id, Long sessionId, String content, Byte status, LocalDateTime created, LocalDateTime updated) {
        super(MessageTable.MESSAGE);

        set(0, id);
        set(1, sessionId);
        set(2, content);
        set(3, status);
        set(4, created);
        set(5, updated);
    }
}
