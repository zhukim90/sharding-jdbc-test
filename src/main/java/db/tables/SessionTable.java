/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Keys;
import db.ShardingJdbcTestSchema;
import db.tables.records.SessionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionTable extends TableImpl<SessionRecord> {

    private static final long serialVersionUID = 255164933;

    /**
     * The reference instance of <code>sharding_jdbc_test.session</code>
     */
    public static final SessionTable SESSION = new SessionTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionRecord> getRecordType() {
        return SessionRecord.class;
    }

    /**
     * The column <code>sharding_jdbc_test.session.id</code>.
     */
    public final TableField<SessionRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>sharding_jdbc_test.session.uuid</code>.
     */
    public final TableField<SessionRecord, Byte> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>sharding_jdbc_test.session</code> table reference
     */
    public SessionTable() {
        this(DSL.name("session"), null);
    }

    /**
     * Create an aliased <code>sharding_jdbc_test.session</code> table reference
     */
    public SessionTable(String alias) {
        this(DSL.name(alias), SESSION);
    }

    /**
     * Create an aliased <code>sharding_jdbc_test.session</code> table reference
     */
    public SessionTable(Name alias) {
        this(alias, SESSION);
    }

    private SessionTable(Name alias, Table<SessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SessionTable(Name alias, Table<SessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SessionTable(Table<O> child, ForeignKey<O, SessionRecord> key) {
        super(child, key, SESSION);
    }

    @Override
    public Schema getSchema() {
        return ShardingJdbcTestSchema.SHARDING_JDBC_TEST;
    }

    @Override
    public Identity<SessionRecord, Long> getIdentity() {
        return Keys.IDENTITY_SESSION;
    }

    @Override
    public UniqueKey<SessionRecord> getPrimaryKey() {
        return Keys.KEY_SESSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<SessionRecord>> getKeys() {
        return Arrays.<UniqueKey<SessionRecord>>asList(Keys.KEY_SESSION_PRIMARY);
    }

    @Override
    public SessionTable as(String alias) {
        return new SessionTable(DSL.name(alias), this);
    }

    @Override
    public SessionTable as(Name alias) {
        return new SessionTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionTable rename(String name) {
        return new SessionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionTable rename(Name name) {
        return new SessionTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Byte> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
