/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Indexes;
import db.Keys;
import db.ShardingJdbcTestSchema;
import db.tables.records.MessageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageTable extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = -728425230;

    /**
     * The reference instance of <code>sharding_jdbc_test.message</code>
     */
    public static final MessageTable MESSAGE = new MessageTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>sharding_jdbc_test.message.id</code>.
     */
    public final TableField<MessageRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>sharding_jdbc_test.message.session_id</code>.
     */
    public final TableField<MessageRecord, Long> SESSION_ID = createField(DSL.name("session_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sharding_jdbc_test.message.content</code>.
     */
    public final TableField<MessageRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.VARCHAR(10000).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sharding_jdbc_test.message.status</code>.
     */
    public final TableField<MessageRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>sharding_jdbc_test.message.created</code>.
     */
    public final TableField<MessageRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sharding_jdbc_test.message.updated</code>.
     */
    public final TableField<MessageRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>sharding_jdbc_test.message</code> table reference
     */
    public MessageTable() {
        this(DSL.name("message"), null);
    }

    /**
     * Create an aliased <code>sharding_jdbc_test.message</code> table reference
     */
    public MessageTable(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>sharding_jdbc_test.message</code> table reference
     */
    public MessageTable(Name alias) {
        this(alias, MESSAGE);
    }

    private MessageTable(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageTable(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MessageTable(Table<O> child, ForeignKey<O, MessageRecord> key) {
        super(child, key, MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return ShardingJdbcTestSchema.SHARDING_JDBC_TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_IDX_SESSION_ID);
    }

    @Override
    public Identity<MessageRecord, Long> getIdentity() {
        return Keys.IDENTITY_MESSAGE;
    }

    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageRecord>>asList(Keys.KEY_MESSAGE_PRIMARY);
    }

    @Override
    public MessageTable as(String alias) {
        return new MessageTable(DSL.name(alias), this);
    }

    @Override
    public MessageTable as(Name alias) {
        return new MessageTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageTable rename(String name) {
        return new MessageTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageTable rename(Name name) {
        return new MessageTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Byte, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
